<div class="widget-container boxed">
	<div class="inner" id="summary">
		<div class="facebook_nav_light p-tip">
			<span class="facebook_date">
			</span>
			<div class="tiptext">
				Click to edit time frame
			</div>
		</div>
		<hr>
		<div id="summary-home">
			<h3 class="widget-title" id="top_10_title">
				About PoliDashboard
			</h3>
			<p>
				<a href="https://polidashboard.com/" target="_blank">PoliDashboard</a> is a data visualization tool designed to help voters, journalists, and campaign staffers to monitor the health of political discussions online and learn about the political and social issue ads that are being shown to users on Facebook and its various other products including Instagram. The data is automatically updated every four hours via the <a href="https://www.facebook.com/ads/library/api" target="_blank">Facebook Ad API</a>.
			</p>
			<p>
				<img src="/images/SML_logo_2012_transparent_black_text.png" style="max-height: 4em; width: auto; float: left; padding-right: 10px;">
				The dashboard is developed by the <a href="https://socialmedialab.ca/" target="_blank">Social Media Lab</a> at Ted Rogers School of Management in Toronto as part of an international election transparency initiative. Country-specific modules are presented in partnership with various academic and civic partners in countries where the <a href="https://www.facebook.com/ads/library/?active_status=all&ad_type=political_and_issue_ads&country=CA&media_type=all" target="_blank">Facebook Ad Library</a> is available.
			</p>
		</div>
		<div id="summary-focus">
			<h2 id="pages_subtitle" class="advertiser_name" style="text-align: center;"></h2>
			<div class="dropdown" style="z-index: 50;">
				<button class="dropdown-btn widget-title"><span class="arrow"><i class="fas fa-arrow-right" aria-hidden="true"></i></span>&nbsp; Facebook Page(s) Funded by: <span class="sub_advertiser_name">___</span></button>
				<div class="dropdown-content">
					<!-- ### Start of Pages Funded Widget -->
					<!-- <div class="navigation-instructions" id="right-navigation-instructions">
						<button class="exit-button" onclick="d3.select('#right-navigation-instructions').remove()"><i class="fas fa-times"></i></button>
						<strong>Navigation Instructions</strong>
						<ul>
							<li>Click on <i class="fas fa-chart-bar"></i> to see a chart of the total number of active ads per day posted by a page controlled by a funder.</li>
							<li>Hover over any dots in the line chart to see the total number of active ads by a funder (or a page that they control) on a specific date in the selected timeframe.</li>
						</ul>
					</div> -->
					
					<!-- <h4 id="pages_subtitle" class="summary_subtitle advertiser_name"> -->
					<h3 class="widget-title" id="page-scroll">
						<!-- Facebook Pages Funded by -->
						<div class="tip">
							<img src="/images/info.png">
							<div id="tiptext-pages" class="tiptext"></div>
						</div>
					</h3></h4>
					<!-- <h4 id="pages_subtitle" class="advertiser_name"></h4> -->
					<h5 id="funder_pages_subtitle" class="summary_subtitle page_name"> Filter by a page</h5>
					<div class="loader red" id="funder_pages_loader">
						<div class="lds-grid">
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
						</div>
					</div>
					<div id="funder_pages"></div> 
				</div>
			</div>
		
			<hr>

			<!-- ### Start of Ads Per Day Widget ### -->
			<div class="dropdown" style="z-index: 30;">
				<button class="dropdown-btn widget-title"><span class="arrow"><i class="fas fa-arrow-right" aria-hidden="true"></i></span>&nbsp; Total Number of Active Ads Per Day Funded by: <span class="sub_advertiser_name">___</span></button>
				<div class="dropdown-content">
					<h3 class="widget-title" id="page-scroll">
						<!-- Total Number of Active Ads Per Day -->
						<div class="tip">
							<img src="/images/info.png">
							<div class="tiptext">
								This chart shows the total number of ads that were active for each day of the selected timeframe.
							</div>
						</div>
					</h3>

					<!-- <h4 id="pages_subtitle" class="summary_subtitle advertiser_name"></h4> -->
					<!-- <h4 id="pages_subtitle" class="advertiser_name"></h4> -->
					<h5 id="pages_subtitle" class="summary_subtitle page_name"></h5>
					<br>
					<div class="loader red" id="timeline_loader">
						<div class="lds-grid">
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
						</div>
					</div>
					<div id="timeline"></div>
				</div>
			</div>	

			<hr>
			
			<!-- ### Start of Map Widget ### -->
			<div class="dropdown" style="z-index: 40;">
				<button class="dropdown-btn widget-title"><span class="arrow"><i class="fas fa-arrow-right" aria-hidden="true"></i></span>&nbsp; Where Facebook Ads Funded by: <span class="sub_advertiser_name">___</span> Were Shown</button>
				<div class="dropdown-content">
					<h3 class="widget-title" id="page-scroll">
						<!-- Where These Ads Were Shown -->
						<div class="tip">
							<img src="/images/info.png">
							<div id="map-textip" class="tiptext">
								This module shows where Meta ads by this funder/page were shown.
								<br><br>
								Hover over any state/region to see what percentage of this funder's ads were shown to users residing in that state/region.
								<!-- This module shows the distribution of this funder's viewed ads across different States.
								Hover over any State to see what percentage of this funder's ads were shown there. -->
								<br><br>
								Ads for which no regional data is available are omitted.
							</div>
						</div>
					</h3>
					<!-- <h4 id="pages_subtitle" class="summary_subtitle advertiser_name"></h4> -->
					<!-- Map loader icon -->
					
					<!-- <h4 id="pages_subtitle" class="advertiser_name"></h4> -->
					<h5 id="pages_subtitle" class="summary_subtitle page_name">&nbsp;</h5>
					<div class="loader red" id="map_loader">
						<div class="lds-grid">
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
						</div>
					</div>
					<div class="widget-content" id="chart-container">
						<div id="map-tooltip"></div>
					</div>
				</div>
			</div>
			<hr>

			<!-- ### Start of Demographic Widget ### -->
			<div class="dropdown" style="z-index: 20;">
				<button class="dropdown-btn widget-title"><span class="arrow"><i class="fas fa-arrow-right" aria-hidden="true"></i></span>&nbsp; Demographic of Who Was Shown Ads Funded by: <span class="sub_advertiser_name">___</span></button>
				<div class="dropdown-content">

					<div class="dropdown" style="z-index: 15;">
						<button style="background-color: #6c6c6c" class="dropdown-btn widget-title"><span class="arrow"><i class="fas fa-arrow-right" aria-hidden="true"></i></span>&nbsp;Navigation Instructions</button>
						
						<div class="dropdown-content dropdown-content-navigation" style="display:none; border: 1px solid lightgrey; box-shadow: none; padding: 0px;">
							<div class="navigation-instructions" id="right-navigation-instructions">
								<ul>
									<li>Hover and keep your mouse over a dot to see that ad's distribution across all demographic’s groups on Facebook.</li>
									<li>If all other dots (other than the dot you hovered over) is at or close to the 0% mark on the x-axis, it suggests that ad was only (or mostly) targeted at that specific demographic group and no other.</li>
									<li>Click on a dot see the ad and additional stats about the ad (ad will open in a new tab).</li>
									<li>New to box plot? Here’s a <a href="https://socialmedialab.ca/2021/09/03/improving-on-the-facebook-ad-library/" target="_blank">primer</a> on how to interpret a box plot chart.</li>
									<li>Note: if more than 1000 ads are visible, they will be hidden and replaced with a violin plot to save resources. Select a shorter time frame or use the page filters to see individual ads.</li>
								</ul>
							</div>
						</div>
					</div>	

					<h3 class="widget-title">
						<!-- Who Was Shown These Ads -->
						<div class="tip">
							<img src="/images/info.png">
							<div class="tiptext">
								<!-- This module shows the age and gender breakdowns of people who saw ads by this funding entity - each dot represents one ad.
								<br><br>
								Hover over a dot to see that ad's distribution across all demographics, and click to see that ad's summary (ad will open in a new tab). -->
								<!-- This module shows the age and gender of users who these ads (by this funding entity) were shown to - each dot represents one ad. -->
								This module shows the age and gender of users who were shown ads from this funder/FB page for the selected timeframe - each dot represents one ad.
								<br><br>
								Hover over a dot to see that ad's distribution across all demographics, and click on a dot to see summary stats about the ad (ad will open in a new tab).
							</div>
						</div>
					</h3>

					<!-- <h4 id="pages_subtitle" class="summary_subtitle advertiser_name"></h4> -->
					
					<!-- <h4 id="pages_subtitle" class="advertiser_name"></h4> -->
					<h5 id="pages_subtitle" class="summary_subtitle page_name"></h5>

					<br>
					<div id="demographics_legend">
						<span id="demographics_men">Men</span>
						<span id="demographics_women">Women</span>
						<span id="demographics_other">Unknown</span>
					</div>
					<div class="loader red" id="demographics_loader">
						<div class="lds-grid">
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
						</div>
					</div>
					<div id="demographics">

					</div>
				</div>
			</div>
				
			<hr>
			<div class="dropdown" style="z-index: 15;">
				<button class="dropdown-btn widget-title"><span class="arrow"><i class="fas fa-arrow-right" aria-hidden="true"></i></span>&nbsp; What Was Said in Ads Funded by: <span class="sub_advertiser_name">___</span></button>
				
				<div class="dropdown-content">
					<h3 class="widget-title">
						<!-- Where These Ads Were Shown -->
						<div class="tip">
							<img src="/images/info.png">
							<div class="tiptext">
								Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. 
								<br><br>
								Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. 
								<br><br>
								Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. 
							</div>
						</div>
					</h3>
					<h5 class="all_funders" style="color :#AAAAAA">&nbsp;This chart applies to all pages from this Funder</h5>
					
					<br/>

					<div class="loader red" style="text-align: center;" id="wordmap_loader">
						<p style="margin-bottom: 0px; margin-top: 20px; font-size: 16px;">Generating, please wait 20-40 seconds...</p>
						<div class="lds-grid">
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
							<div></div>
						</div>
					</div>

					<div id="wordmap-error" style="display: none;" style="padding-top: 20px; padding-bottom: 20px">
						<br/><h3 style="text-align: center;">There was an error generating the Word/Phrase cloud.</h3><br/>
					</div>

					<img style="border: 1px solid lightgrey;" id="imageElement" src="" alt="Image">
				</div>
			</div>

			<hr>
			<div class="dropdown" style="z-index: 15;">
				<button class="dropdown-btn widget-title"><span class="arrow"><i class="fas fa-arrow-right" aria-hidden="true"></i></span>&nbsp; Frequency of Repeated Phrases in Ads Funded by: <span class="sub_advertiser_name">___</span></button>
				
				<div class="dropdown-content">
					<h3 class="widget-title">
						<!-- Where These Ads Were Shown -->
						<div class="tip">
							<img src="/images/info.png">
							<div class="tiptext">
								Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. 
								<br><br>
								Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. 
								<br><br>
								Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. Sample Text. 
							</div>
						</div>
					</h3>
					<h5 class="all_funders" style="color :#AAAAAA">&nbsp;This table applies to all pages from this Funder</h5>
					
					<!-- <br/> -->

					<div id="wordmap-error" style="display: none;" style="padding-top: 20px; padding-bottom: 20px">
						<br/><h3 style="text-align: center;">There was an error generating the Word/Phrase cloud.</h3><br/>
					</div>

					<div class="dropdown-content">
						<table class="table" id="infoTable">
							<thead>
								<tr>
									<th>Creative Body</th>
									<th style="max-width: 5%">#Ads</th>
								</tr>
							</thead>
							<tbdody>

							</tbdody>
						</table>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<script type="text/javascript">
	// JavaScript to toggle the dropdown content
	document.addEventListener("DOMContentLoaded", function () {
		var dropdowns = document.querySelectorAll(".dropdown");

		// Loop through each dropdown
		dropdowns.forEach(function (dropdown) {
			var dropdownBtn = dropdown.querySelector(".dropdown-btn");
			var dropdownContent = dropdown.querySelector(".dropdown-content");

			if (!dropdownContent.classList.contains("dropdown-content-navigation")) {
				dropdownContent.style.display = "block";
			}

			dropdownBtn.addEventListener("click", function () {
				if (dropdownContent.style.display === "none" || dropdownContent.style.display === "") {
					dropdownContent.style.display = "block";
				} else {
					// Add a class to trigger the slide-up animation
					dropdownContent.classList.add("slide-up");
					// After the animation, hide the content
					setTimeout(function () {
						dropdownContent.style.display = "none";
						// Remove the slide-up class for future use
						dropdownContent.classList.remove("slide-up");
					}, 500); // Match the animation duration (0.5s)
				}
			});
		});
	});

	const ALL = '.*?'
	const desktopMapWidth = 1
	let initial = true

	// let table = new DataTable('#infoTable');

	showAbout()
	function showAbout() {
		// Switch to 'about' view
		d3.select('#summary-home').style('display', 'block')
		d3.select('#summary-focus').style('display', 'none')
		d3.select('#summary-navigation-instructions').style('display', 'none')
		d3.select('#top_pages_loader').style('display', 'block')
	}

	var timelineData;
	var demographicsData;
	var mapData;
	var prevRawMap = null;
	var rawMap = null;
	var chosenPage = null;
	var mainFunder;

	let activeDemographicsRequest = null;
	let activFunderPagesRequest = null;
	let activeRequests = [];

	// Word/Phrase cloud variables
	let phrasecloudImage = null;
	let summaryTable = null;
	let phrasecloudData = null;
	
	const cloudTable = new DataTable('#infoTable', {
		lengthMenu: [
			[5, 10, 15, 20, -1],
			['5', '10', '15', '20', 'All'],
		],
		buttons: [
			'pageLength',
		],
		ordering: true,
		order: [[ 1, "desc" ]]
	});
	const cloudImageElement = document.getElementById("imageElement");
	
	let requestCount = 0; // Track the number of requests made
	let timer = 0; // Initial timer value
	let timerInterval;

	function performRequest(url, requestData, successCallback, requestType='base') {
		console.log("Request requested: " + url + " " + requestType);
		activeRequests.filter(req => req.url === url && req.requestType === requestType).forEach(req => req.request.abort());

		const request = $.post(url, requestData)
			.done(data => successCallback(data))
			.always(() => { activeRequests = activeRequests.filter(req => req !== request) });
		activeRequests.push({ url, request, requestType });
	}

	function performFunderRequests(funder) {
		if (timer > 40) { // Should help prevent spamming requests
			alert("Please wait " + (timer - 40) + " seconds before making another request.");
			return false;
		}
		// Decrement the timer every second
		if (timerInterval) {
			clearInterval(timerInterval); // Clear the existing interval
		}
		timerInterval = setInterval(() => {
			timer--;
			if (timer <= 0) {
				clearInterval(timerInterval);
				timer = 0;
			}
		}, 1000);
		
		// Add 30 to the timer, the shorted amount of time a request can go through is 30 seconds
		timer = timer + 30;

		d3.select("#chart-container").style("display", "none")
		const commonData = {
			startDay: fbStartDay,
			endDay: fbEndDay,
			funder,
			country
		};

		// Get the funder's pages
		performRequest('/facebook_ads_v2/funder_pages', commonData, data => {
			const filteredPages = pageFilter(data)
			d3.select('#funder_pages_loader').style('display', 'none');
			drawPages(filteredPages, '#funder_pages');
		});

		// Get the funder's timeline
		performRequest('/facebook_ads_v2/funder_timeline', commonData, data => {
			const filteredTimeline = pageFilter(data)
			drawTimeline(filteredTimeline)
			timelineData = data;
		});

		performRequest('/facebook_ads_v2/funder_map', commonData, data => {
			// drawMap(data);
			mapData = data;
			rawMap = new Statemap(data, "chart-container", country); // TO DO
			prevRawMap = rawMap;
		});
		// if (country === 'us' || country === 'ca') {
		// }

		performRequest('/facebook_ads_v2/frequency_table', commonData, data => {
			summaryTable = data.summary_table;
			
			cloudTable.clear().draw();
			
			for (const phraseObj of summaryTable) {
				if (phraseObj.creative_bodies === "") {
					continue;
				} 
				const snapshotUrl = phraseObj.snapshot_url.replace(/'/g, "\\'");
				const freqObj = `<a style="cursor: pointer;" onclick="window.open('${snapshotUrl}', '_blank')">~${phraseObj.freq} &nbsp;&nbsp;<i class="fas fa-link"></i></a>`;
				// Add data to the DataTable
				cloudTable.row.add([
					phraseObj.creative_bodies,
					freqObj
				]).draw(false);
			}
			cloudTable.draw(true);

		});


		// --- Handle Phrasecloud ---
		while (cloudTable.rows.length > 1) {  // Clear the table first
			cloudTable.deleteRow(1);
		}

		const cloudInput = {
			startDay: fbStartDay,
			endDay: fbEndDay,
			funder,
			country,
			is_wordcloud: false,
		};
		
		phrasecloudImage = null;
		phrasecloudData = null;
		summaryTable = null;

		// CALL PHRASECLOUD
		performRequest('/facebook_ads_v2/funder_word', cloudInput, data => {
			if (data.error) {
				d3.select('#wordmap-error').style('display', 'block')
				d3.select('#wordmap_loader').style('display', 'none');
				d3.select("#imageElement").style("display", 'none');
				phrasecloudData = "error";
				return null;
			}

			phrasecloudImage = data.img; // Store wordcloud image

			d3.select('#wordmap_loader').style('display', 'none')
			d3.select("#imageElement").style("display", 'block');
			cloudImageElement.src = "data:image/png;base64," + phrasecloudImage;

		}, 'phrasecloud', error => {
			phrasecloudData = "error";
			console.error("An error occurred:", error);
		});

		return true;
	}
	
	function showFunder(funder) {
		const funderSuccess = performFunderRequests(funder);
		if (!funderSuccess) {
			return;
		}
		// Show statistics on a funding entity
		mainFunder = funder;
		timelineData = null;
		demographicsData = null;
		mapData = null;
		// cancelRequest('/facebook_ads_v2/funder_word');
		d3.select('#wordmap-error').style('display', 'none');
		const table = document.getElementById("infoTable");
		while (table.rows.length > 1) { // Clear the table first
			table.deleteRow(1);
		}

		var dropdowns = document.querySelectorAll(".dropdown");
		// Loop through each dropdown
		dropdowns.forEach(function (dropdown) {
			var dropdownContent = dropdown.querySelector(".dropdown-content");
			if ((dropdownContent.style.display === "none" || dropdownContent.style.display === "") && !dropdownContent.classList.contains("dropdown-content-navigation")) {
				dropdownContent.style.display = "block";
			}
		});

		chosenPage = null;
		d3.selectAll('.page_name')
			// .style('display', 'none')
			.style('color', "#AAAAAA")
			.html('<i class="fas fa-filter"></i>&nbsp;No page filter selected')

		d3.select("#chart-container").style("display", "flex");
		d3.select('#summary-home').style('display', 'none');
		d3.select('#summary-focus').style('display', 'block');
		d3.select('#summary-navigation-instructions').style('display', 'inline-block');
		d3.select('#demographics').html('');
		d3.select('#regions').html('');
		d3.select('#timeline').html('');
		d3.selectAll('.advertiser_name')
			.text('Funded by: ' + funder);
		d3.select('#funder_pages_loader').style('display', 'block');
		d3.select('#demographics_loader').style('display', 'block');
		d3.select('#timeline_loader').style('display', 'block');
		d3.select('#map_loader').style('display', 'block');	
		// if (country != 'us' && country != 'ca') d3.select('#regions_loader').style('display', 'block');
		d3.select('#wordmap_loader').style('display', 'none'); // User has to select an option before the loader becomes visible
		// d3.select('#wordmap-explain').style('display', 'block');
		d3.select('#funder_pages').html('');
		d3.select('#funder_note').remove();
		
		d3.select('#wordmap_loader').style('display', 'block'); // Show loader
		d3.select("#imageElement").style("display", 'none'); // Don't show image right away

		d3.selectAll('.sub_advertiser_name')
			.text(funder)
			.style('text-decoration', 'underline')
		
		d3.select('#tiptext-pages')
			.html('This module shows all Facebook Page(s) funded by: <span style="color: yellow;">' + funder + '</span><br><br>Funding entities can set up and control multiple Facebook Pages from which they can then use to run custom advertising campaigns on both Facebook and Instagram.')

		// Scroll to the funder, if mobile
		if (isMobile) {
			$([document.documentElement, document.body]).animate({
				scrollTop: $("#summary").offset().top
			}, 500);
		}

		// Fix for Conservative Party naming discrepancy
		if (funder == 'Conservative Party of Canada - Parti conservateur du Canada') {
			d3.select('#summary').append('p')
				.attr('id', 'funder_note')
				.text('Note: While the other major parties use their full English and French titles when funding both their official party page and their leader\'s page, the Conservative party sometimes uses only the English title for these ads. These two variations have been combined here to allow comparison between the parties.')
		}

		// Handle null funder
		if (funder == 'No funding entity given') {
			funder = null;
		}
	}

	function showPage(p) {
		// Highlight statistics on a specific page
		
		d3.select('#demographics_loader').style('display', 'block')
		d3.select('#demographics').html('')
		d3.select('#timeline_loader').style('display', 'block')
		d3.select('#map_loader').style('display', 'block')
		d3.select('#timeline').html('')
		// if (country != 'us' && country != 'ca') {
		// 	d3.select('#regions_loader').style('display', 'block')
		// 	d3.select('#regions').html('')
		// } else {
		// }
		d3.select("#chart-container").style("display", "none")
		d3.select('#regions_loader').style('display', 'block')
		// d3.select('#wordmap_loader').style('display', 'block')
		// Scroll to show data if on mobile
		$([document.documentElement, document.body]).animate({
			scrollTop: $("#page-scroll").offset().top - 30
		}, 500);

		chosenPage = p.page_id
		setTimeout(() => {
			// Add the "Posted by" subtitles
			d3.selectAll('.page_name')
				.style('display', 'block')
				.style('color', "#000000")
				.html(`<i class="fas fa-filter"></i>&nbsp;Ads Posted by: "${p.page_name}" Page`)
				.append('button')
				.attr('class', 'page_exit_button')
				.html('<i class="fas fa-times-circle fa-lg" style="color: #CC4444;" title="Remove page filter"></i>')
				.on('click', revertPage)

			// Draw the three charts
			const commonData = {
				startDay: fbStartDay,
				endDay: fbEndDay,
				funder: mainFunder,
				country
			};

			try {
				drawTimeline(pageFilter(timelineData))
			} catch (err) {
				console.log(err)
			}
			try {
				drawDemographics(pageFilter(demographicsData))
			} catch (err) {
				performRequest('/facebook_ads_v2/funder_demographics', commonData, data => {
					const filteredDemographics = pageFilter(data);
					demographicsData = data;
					drawDemographics(filteredDemographics);
				});
			}
			try {
				commonData.page_id = p.page_id;
				performRequest('/facebook_ads_v2/funder_map', commonData, data => {
					rawMap = new Statemap(data, "chart-container", country);
				});
				//drawMap(pageFilter(mapData))
			} catch (err) {
				console.log(err)
			}
		}, 10)

	}

	function revertPage() {
		// Remove a selected page and redraw charts
		console.log("REVERTING")
		chosenPage = null;
		d3.selectAll('.page_name')
			// .style('display', 'none')
			.style('color', "#AAAAAA")
			.html('<i class="fas fa-filter"></i>&nbsp;No page filter selected')
		
		const commonData = {
			startDay: fbStartDay,
			endDay: fbEndDay,
			funder: mainFunder,
			country
		};

		// When we revert the page, should any of the previously stored charts happen to be null, then we have to re-request them
		// (happens when user clicks on a page filter before it can finish the API call)
		try {
			drawTimeline(pageFilter(timelineData))
		} catch (err) {
			console.log(err)
		}
		try {
			drawDemographics(pageFilter(demographicsData))
		} catch (err) {
			performRequest('/facebook_ads_v2/funder_demographics', commonData, data => {
				const filteredDemographics = pageFilter(data);
				demographicsData = data;
				drawDemographics(filteredDemographics);
			});
			d3.select('#demographics_loader').style('display', 'block')
			d3.select('#demographics').html('')
		}
		try {
			if (prevRawMap) {
				rawMap = prevRawMap
				rawMap.draw();
			} else {
				rawMap = new Statemap(data, "chart-container", country);
			}
		} catch (err) {
			commonData.page_id = p.page_id;
			performRequest('/facebook_ads_v2/funder_map', commonData, data => {
				if (prevRawMap) {
					rawMap = prevRawMap
					rawMap.draw();
				} else {
					rawMap = new Statemap(data, "chart-container", country);
					prevRawMap = rawMap;
				}
			});	
		}
	}

	function pageFilter(d) {
		// Remove all the results from a funder's data that don't match the current page (stored in global chosenPage)
		if (chosenPage == null) return d;
		else return d.filter(x => {
			return x.page_id == chosenPage
		})
	}

	function spendToText(spend) {
		// Format spend range
		return `${currencySymbol + d3.format('.4s')(spend.lower_bound)} - ${currencySymbol + d3.format('.4s')(spend.upper_bound)} Spent`
	}

	function impressionsToText(impressions) {
		// Format impression minimum
		return `More than ${d3.format('.4s')(impressions.lower_bound)} Impressions`
	}

	function perturb(y, amount) {
		// Add a random amount - used to stagger the scatter plot's y-axis
		return y + (Math.random() - 0.5)*amount
	}

	function getDemographicLabel(demographic) {
		// Format demographic for scatter plots
		if (demographic.gender=='female') return ('W ' + demographic.age)
		if (demographic.gender=='male') return ('M ' + demographic.age)
		return '? 18-65+'
	}

	// List of regions is given by server from countries.json
	var regionCodes = <%- JSON.stringify(regions) %>;
	function getRegionLabel(id) {
		code = regionCodes[id.region]
		if (code == undefined) {
			console.log("Region not found (adding to 'other'):")
			console.log(id.region)
			return 'Other'
		}
		return code
	}

	const ageRanges = [
		'13-17',
		'18-24',
		'25-34',
		'35-44',
		'45-54',
		'55-64',
		'65+'
	]

	const ageLowerBounds = [
		13,
		18,
		25,
		35,
		45,
		55,
		65
	]

	function getAgeIndex(lowerBound) {
		// Get corresponding integer from age range (lower bound)
		for (i in ageLowerBounds) {
			if (ageLowerBounds[i] == lowerBound) return i
		}
	}

	function funderToFbUrl (funder) {
		// Format funding entity URL for Facebook
		return `https://www.facebook.com/ads/library/?active_status=active&ad_type=all&country=CA&q=${ encodeURIComponent(funder) }`
	}

	function demographicsCheckBoxId (plainText) {
		return 'demographics-checkbox-' + plainText.replace(/\s/g, '')
	}

	function drawPages(data, anchor) {
		// --- Draw the list of a funder's pages ---
		
		// Create the container for the page widget
		var pageContainers = d3.select(anchor)
			.html("")
			.selectAll('pageContainers')
			.data(data)
			.enter()
			.append('div')
				.attr('class', 'page-container')

		// Create the left column (with the filter button)
		if (data.length > 1) {
			var pageLefts = pageContainers.append('div')
				.attr('class', 'page-left')
				.style('max-wdith', '90px')
				.append('button')
					.style('margin', '5px')
					.style('padding', '4px')
					.html('<p>Filter by</p><i class="fas fa-filter fa-lg"></i>')
					.attr('class', 'page-filter-button')
					.on('click', d => {
						showPage(d)
					})
		} else {
			var pageLefts = pageContainers.append('div')
				.style('width', '20px')
			d3.selectAll('.page_name')
				.style('color', "#AAAAAA")
				.html('<div></div>')
			d3.selectAll('.all_funders')
				.style('color', "#AAAAAA")
				.html('<div></div>')
		}

		// Create the right column with all the data
		var pageRights = pageContainers.append('div')
			.attr('class', 'page-right')

		// Create the page's name and link
		pageRights.append('p')
			.text(function (d) {
				if (data.length > 1) return (data.indexOf(d) + 1) + '. '
				else return ''
			})
			.append('a')
			.attr('href', function(d) {return (`https://www.facebook.com/${d.page_id}`)})
			.attr('target', '_blank')
			.text(function(d) {return d.page_name})

		// Create the number of ads
		pageRights.append('p')
			.text(function(d){return `${d.total_ads} Unique Ads `})
			.append('a')
				.attr('href', function(d) {return `https://www.facebook.com/ads/library/?active_status=all&ad_type=political_and_issue_ads&country=CA&view_all_page_id=${d.page_id}&sort_data[direction]=desc&sort_data[mode]=relevancy_monthly_grouped&search_type=keyword_unordered&media_type=all`})
				.attr('target', '_blank')
				.html('<ion-icon name="search"></ion-icon>')

		// Create the spend range and tooltip explanation
		pageRights.append('p')
			.text(function(d){return spendToText(d.spend)})
			.attr('class', 'p-tip')
			.append('div')
				.attr('class', 'tiptext')
				.html('Meta reports ads spending as a range with a maximum and minimum. The values shown are the sum of these maxima and minima for all ads ran by this Facebook Page.')

		// Create the number of impressions range and tooltip explanation
		pageRights.append('p')
			.text(function(d) {return impressionsToText(d.impressions)})
			.attr('class', 'p-tip')
			.append('div')
			.attr('class', 'tiptext')
			.html('Meta reports ad impressions as a range with a maximum and minimum. The value shown is the  minimum number of impressions for all ads ran by this Facebook Page.')
	}

	updateFacebookTimestamps()
	function updateFacebookTimestamps() {
		end = new Date();
		end.setDate(end.getDate() - fbEndDay);
		
		// Add 1 day to the end date
		end.setDate(end.getDate() + 1);

		startDay = new Date();
		startDay.setDate(startDay.getDate() - fbStartDay);
		
		format = d3.timeFormat('%b %d, %Y');

		d3.selectAll('.facebook_date')
			.html(`Time Frame: ${format(startDay)} - ${format(end)}`);
		d3.selectAll('.facebook_timestamp_no_calendar')
			.html(`${format(startDay)} - ${format(end)}`);
	}

	function drawTimeline(data, pageId=null) {
		// Draw the funder's ad timeline
		d3.select('#timeline_loader').style('display', 'none')

		// Get the start and end dates
		var end = new Date()
		end.setDate(end.getDate() - fbEndDay)
		var start = new Date()
		start.setDate(start.getDate() - fbStartDay)

		var rows = [
			['date'],
			['0 - 99'],
			['100 - 499'],
			['500 - 999'],
			['1000 - 4999'],
			['5000+']
		]

		// Create empty rows
		for (var day = new Date(start.getTime()); day <= end; day.setDate(day.getDate() + 1)) {
			rows[0].push(day.getTime())
			for (var r = 1; r < rows.length; r++) {
				rows[r].push(0)
			}
		}

		// Fill rows based on data
		data.forEach(ad => {
			var row = rows.map(el => el[0]).indexOf(rangeToLabel(ad.spend))
			for (var c = 1; c < rows[0].length; c++) {
				if (rows[0][c] > Date.parse(ad.first_collected) && rows[0][c] < Date.parse(ad.latest_collected)) {
					rows[row][c]++;
				}
			}
		})

		// Generate chart with C3.js
		var chart = c3.generate({
			data: {
				x: 'date',
				columns: rows,
				// type: 'timeseries',
				// groups: [group],
				// order: order
			},
			axis: {
				x: {
					type: 'timeseries',
					tick: {
						format: '%Y-%m-%d',
						culling: true
					},
					padding: {
						right: 0,
						left: 0
					}
				},
				y: {
					tick: {
						count: 4,
						format: d3.format('d')
					},
					min: 0,
					padding: {
						bottom: 0
					}
				}
			},
			bindto: '#timeline',
			size: {
				height: '200'
			},
			padding: {
				right: 25
			}
		});
	}

	function drawDemographics(data) {
		// Create the targetted demographics chart
		// Clear existing chart if there is one
		var container = d3.select("#demographics")
		container.html("")

		// Get the chart dimensions
		var margin = {top: 10, right: 30, bottom: 30, left: 50}
		var width = container.node().getBoundingClientRect().width - margin.left - margin.right
		var height = 400 - margin.top - margin.bottom

		// Create the drawing space
		var svg = container
			.append("svg")
				.attr("width", width + margin.left + margin.right)
				.attr("height", height + margin.top + margin.bottom)
			.append("g")
				.attr("transform",
					"translate(" + margin.left + "," + margin.top + ")");

		// Create x axis
		var x = d3.scaleLinear()
			.domain([0, 1])
			.range([ 0, width ]);
		svg.append("g")
			.attr("transform", "translate(0," + height + ")")
			.call(
				d3.axisBottom(x)
					.tickFormat(d3.format('.0%'))
			);



		var yDomain = ['M 13-17', 'W 13-17', 'M 18-24', 'W 18-24', 'M 25-34', 'W 25-34', 'M 35-44', 'W 35-44', 'M 45-54', 'W 45-54', 'M 55-64', 'W 55-64', 'M 65+', 'W 65+', '? 18-65+', '']

		// Used to determine the color of the dots
		var color = function(d) {
			if (d.demographic[0] == 'M') return colorSchemes.blue
			if (d.demographic[0] == 'W') return colorSchemes.green
			return '#F0A202'
		}

		// Clean the data for use in the chart
		var cleanedData = [] // The cleaned data will be a list of objects corresponding to each dot
		var foundUnderage = false // Most of the time we only show engagement for users 18+,
		// but sometimes there is underage engagement that needs to be shown.
		for (var i = 0; i < data.length; i++) {
			var foundDemos = []

			for (var j = 0; j < data[i].demographics.length; j++) {
				var point = data[i].demographics[j]
				var demo = getDemographicLabel(point._id)

				if (yDomain.includes(demo)) {
					cleanedData.push({
						demographic: demo,
						percentage: point.percentage,
						ad: data[i]._id,
						url: `https://www.facebook.com/ads/library/?id=${data[i]._id}`,
						spend: rangeToLabel(data[i].spend)
					})

					foundDemos.push(demo)

					if (demo.includes('13')) {
						foundUnderage = true
					}
				} else {
					console.log("NOT IN DOMAIN")
					console.log(point)
				}
			}

			for (var j = 0; j < yDomain.length-1; j++) {
				if (!foundDemos.includes(yDomain[j])) {
					cleanedData.push({
						demographic: yDomain[j],
						percentage: 0,
						ad: data[i]._id,
						url: `https://www.facebook.com/ads/library/?id=${data[i]._id}`,
						spend: rangeToLabel(data[i].spend)
					})
				}
			}
		}

		// Remove the underage demographics if they are all zero
		if (!foundUnderage) {
			yDomain.splice(0, 2)
			cleanedData = cleanedData.filter(d => {return yDomain.includes(d.demographic)})
		}

		// Calculate y-coordinates of each row
		var yRange = []
		for (var i = 0; i < yDomain.length; i++) {
			yRange.push(height * i / (yDomain.length - 1))
		}

		// Create y-axis
		var y = d3.scaleOrdinal()
			.domain(yDomain)
			.range(yRange)
		svg.append("g")
			.call(d3.axisLeft(y));

		var defaultRadius = 3

		// Function to be called when you mouseover a dot
		var highlight = function(d) {
			d3.selectAll('.ad_'+d.ad)
				.transition()
				.duration(200)
				.attr('r', 6)
				.style('opacity', 1)
				.style('fill', "black")
		}

		// Function to be called when you mouse out of a dot
		var doNotHighlight = function(d) {
			d3.selectAll('.demo_dot')
				.transition()
				.duration(200)
				.attr('r', defaultRadius)
				.style('opacity', 0.2)
				.style('fill', color)
		}

		// Function to be called when you click a dot
		var viewAd = function(d) {
			window.open(d.url, '_blank')
		}

		// console.log(cleanedData)
		if (data.length < 1000) {
			// Draw and style each of the dots
			svg.append('g')
				.selectAll('dot')
				.data(cleanedData)
				.enter()
				.append('circle')
					.attr('class', function (d) {return 'demo_dot ad_' + d.ad})
					.attr('cx', function(d) {return x(d.percentage)})
					.attr('cy', function(d) {return perturb(y(d.demographic), 12)})
					.attr('r', defaultRadius)
					.style('fill', color)
					.style('opacity', 0.2)
					.style('cursor', 'pointer')
					.on("mouseover", highlight)
					.on("mouseleave", doNotHighlight)
					.on("click", viewAd)
		} else {
			// If there are too many dots, show a violin plot instead of dots

			// Create a histogram of x-axis frequencies
			var histogram = d3.histogram()
				.domain([0, 1])
				.thresholds(x.ticks(160))
				.value(d => d)

			// Create the nested statistics
			var numstat = d3.nest()
				.key(function(d) { return d.demographic;})
				.rollup(function(d) {   // For each key..
					input = d.map(function(g) { return g.percentage;})
					bins = histogram(input)   // And compute the binning on it.
					var lengths = bins.map(b => b.length)
					var maxLength = d3.max(lengths)
					return lengths.map((v, i) => {
						return {
							size: v / maxLength,
							start: i / lengths.length
						}
					})
				})
				.entries(cleanedData)

			// Draw the violins
			svg
				.selectAll("myViolin")
				.data(numstat)
				.enter()        // So now we are working group per group
				.append("g")
				.attr("transform", function(d){ return("translate(0, " + y(d.key) +")") } ) // Translation on the right to be at the group position
				.append("path")
					.style("fill", function(d) {
						if (d.key[0] == 'M') return colorSchemes.blue
						if (d.key[0] == 'W') return colorSchemes.green
						return '#F0A202'
					})
					.datum(function(d){ return(d.value)})
					.attr("d", d3.area()
						.y0(function(d){return(d.size * 10)} )
						.y1(function(d){return(-d.size * 10) } )
						.x(function(d){return(x(d.start)) } )
						   // This makes the line smoother to give the violin appearance. Try d3.curveStep to see the difference
					)

		}
		// boxplot height
		var boxHeight = 12

		// Calculate quartiles and median for each row
		var sumstat = d3.nest()
			.key(function(d) {return d.demographic})
			.rollup(function(d) {
				q1 = d3.quantile(d.map(function(g) { return g.percentage;}).sort(d3.ascending),.25)
				median = d3.quantile(d.map(function(g) { return g.percentage;}).sort(d3.ascending),.5)
				q3 = d3.quantile(d.map(function(g) { return g.percentage;}).sort(d3.ascending),.75)
				interQuantileRange = q3 - q1
				min = q1 - 1.5 * interQuantileRange
				max = q3 + 1.5 * interQuantileRange
				return({q1: q1, median: median, q3: q3, interQuantileRange: interQuantileRange, min: min, max: max})
			})
			.entries(cleanedData)

		// Draw the horizontal lines ("whiskers")
		svg.selectAll('horizLines')
			.data(sumstat)
			.enter()
			.append('line')
				.attr("y1", function(d){return y(d.key)})
				.attr("y2", function(d){return y(d.key)})
				.attr("x1", function(d){return x(d.value.min)})
				.attr("x1", function(d){return x(d.value.max)})
				.attr('stroke', 'black')

		// Draw the boxes
		svg.selectAll('boxes')
			.data(sumstat)
			.enter()
			.append('rect')
				.attr('y', function(d){return(y(d.key) - boxHeight/2)})
				.attr('x', function(d){return(x(d.value.q1))})
				.attr('width', function(d){return(x(d.value.q3) - x(d.value.q1))})
				.attr('height', boxHeight)
				.attr('stroke', 'black')
				.attr('fill', 'transparent')
				.style('pointer-events', 'none')

		// Draw the media lines
		svg.selectAll('medianLines')
			.data(sumstat)
			.enter()
			.append('line')
				.attr('x1', function(d){return(x(d.value.median))})
				.attr('x2', function(d){return(x(d.value.median))})
				.attr('y1', function(d){return(y(d.key) - boxHeight/2)})
				.attr('y2', function(d){return(y(d.key) + boxHeight/2)})
				.attr('stroke', 'black')


		// Remove the loading indicator once the chart is finished
		d3.select('#demographics_loader').style('display', 'none')
	}

	async function fetchTopoData() {
		try {
			const mapDataset = await d3.json("https://d3js.org/us-10m.v1.json");
			return mapDataset;
		} catch (error) {
			console.error("Error fetching map data:", error);
			throw error;
		}
	}

</script>

